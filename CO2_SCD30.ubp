module main
author unknown
version 1 0 
description ''
variables mainMenuSettings mainMenu calibrateMenu Start list interval menuTimeInterval timeIntervalSettings counter additionalSettings additionalMenu LEDon GraphOn 

	spec ' ' 'advanceMenu' 'advanceMenu _' 'auto' '10'
	spec ' ' 'calibrationInfo' 'calibrationInfo'
	spec ' ' 'displayInformation' 'displayInformation'
	spec 'r' 'menuyToGraph' 'menuyToGraph _ _ _' 'auto auto auto' '10' '10' '10'
	spec ' ' 'resetMenu' 'resetMenu'
	spec 'r' 'stringToList' 'stringToList _' 'auto' '10'

to calibrationInfo {
  for i 300 {
    if ((i % 3) == 0) {
      '[display:mbDisplayOff]'
      '[tft:text]' 'Calibrating: ' 0 0 65280
      '[tft:text]' ('[data:join]' (fillDigits (i / 3) 3) ' %') 150 0 65280
    }
    waitMillis 1000
  }
}

to displayInformation {
  x = 0
  y = 0
  '[display:mbDisplayOff]'
  '[tft:text]' 'CO2' 0 0 color
  '[tft:text]' 'ppm' 0 30 color
  displayDigits co2 5
  '[tft:text]' ('[data:join]' 'T: ' temperature) 0 65 color
  '[tft:text]' ('[data:join]' 'H: ' humidity) 80 65 color
  '[tft:text]' ('[data:join]' 'c: ' (fillDigits counter 6)) 165 73 (makeColor 180 180 180) 1 false
}

to resetMenu {
  mainMenu = (booleanConstant false)
  calibrateMenu = (booleanConstant false)
  menuTimeInterval = (booleanConstant false)
  additionalMenu = (booleanConstant false)
  Start = (booleanConstant false)
  menuy = 1
}

script 515 50 {
whenBroadcastReceived 'Main Menu'
resetMenu
mainMenu = (booleanConstant true)
displayOptions mainMenuSettings
setUserLED true
}

script 1147 50 {
whenBroadcastReceived 'Additional'
resetMenu
additionalMenu = (booleanConstant true)
displayOptions additionalSettings
}

script 821 55 {
whenBroadcastReceived 'Interval'
resetMenu
menuTimeInterval = (booleanConstant true)
displayOptions timeIntervalSettings
}

script 91 56 {
whenStarted
interval = 5
LEDon = (booleanConstant true)
GraphOn = (booleanConstant false)
mainMenuSettings = 'Main Menu;Start;Interval;Additional;Calibrate'
timeIntervalSettings = 'Time Intervall;5s;10s;15s;20s;30s;60s;120s'
additionalSettings = 'Additional Settings;LED on;LED off;Graph on;Graph off'
sendBroadcast 'Main Menu'
}

script 90 306 {
whenButtonPressed 'A+B'
sendBroadcast 'Main Menu'
}

script 522 309 {
whenBroadcastReceived 'Calibrate'
resetMenu
'[display:mbDisplayOff]'
calibrateMenu = (booleanConstant true)
if ('SCD30 isReady?') {
  'SCD30 start calibrating'
  calibrationInfo
  'SCD30 stop calibrating'
  sendBroadcast 'Main Menu'
} else {
  '[tft:text]' 'SCD30 not ready!' 0 0 65280
}
}

script 935 314 {
whenBroadcastReceived 'Start'
setUserLED false
resetMenu
'[display:mbDisplayOff]'
Start = (booleanConstant true)
counter = 1
list = ('[data:makeList]')
initDigits 20 4 2
color = (makeColor 255 255 30)
repeatUntil (not Start) {
  if ('SCD30 isReady?') {
    'SCD30 read measurement'
    '[data:addLast]' co2 list
    if (counter > 240) {
      '[data:delete]' 1 list
    }
  } else {
    'SCD30 soft reset'
  }
  displayInformation
  sayIt co2 '' '' ''
  if GraphOn {
    printIt counter co2 temperature humidity
  }
  if LEDon {
    setNeoPixelColor 1 (colorFromRGB (co2 / 8) (255 - (co2 / 8)) 0)
  }
  drawGraph list '400;800;1200;1600;2000;2400' 120 color 0 2400 ('[data:join]' interval ' s -> ' (interval * 4) ' min.')
  counter += 1
  waitMillis (interval * 1000)
}
}

script 91 422 {
whenButtonPressed 'A'
if mainMenu {
  advanceMenu mainMenuSettings
} menuTimeInterval {
  advanceMenu timeIntervalSettings
} additionalMenu {
  advanceMenu additionalSettings
}
}

script 90 724 {
whenButtonPressed 'B'
sayIt 'Additional'
if mainMenu {
  if ((getOption mainMenuSettings) == 'Calibrate') {
    sendBroadcast 'Calibrate'
  } ((getOption mainMenuSettings) == 'Interval') {
    sendBroadcast 'Interval'
  } ((getOption mainMenuSettings) == 'Start') {
    sendBroadcast 'Start'
  } ((getOption mainMenuSettings) == 'Additional') {
    sendBroadcast 'Additional'
  }
} menuTimeInterval {
  interval = (at 1 ('[data:split]' (getOption timeIntervalSettings) 's'))
  sendBroadcast 'Main Menu'
} additionalMenu {
  if ((getOption additionalSettings) == 'LED on') {
    LEDon = (booleanConstant true)
  } ((getOption additionalSettings) == 'LED off') {
    LEDon = (booleanConstant false)
  } ((getOption additionalSettings) == 'Graph on') {
    GraphOn = (booleanConstant true)
  } ((getOption additionalSettings) == 'Graph off') {
    GraphOn = (booleanConstant false)
  }
  sendBroadcast 'Main Menu'
}
}

script 712 1507 {
to resetMenu {}
}


module NeoPixel Output
author MicroBlocks
version 1 2 
tags led strip rgb string ws2812 
description 'Control NeoPixel (WS2812) RGB LED strips.
'
variables _np_pixels 

	spec ' ' 'neoPixelAttach' 'attach _ LED NeoPixel strip to pin _ : has white _' 'num auto bool' 10 '' false
	spec ' ' 'setNeoPixelColors10' 'set NeoPixels _ _ _ _ _ _ _ _ _ _' 'color color color color color color color color color color'
	spec ' ' 'clearNeoPixels' 'clear NeoPixels'
	spec ' ' 'neoPixelSetAllToColor' 'set all NeoPixels color _' 'color'
	spec ' ' 'setNeoPixelColor' 'set NeoPixel _ color _' 'num color' 1
	spec ' ' 'rotateNeoPixelsBy' 'rotate NeoPixels by _' 'auto' 1
	spec 'r' 'colorFromRGB' 'color r _ g _ b _ (0-255)' 'num num num' 0 100 100
	spec 'r' 'randomColor' 'random color'
	spec ' ' '_NeoPixel_ensureInitialized' '_NeoPixel_ensureInitialized'
	spec ' ' '_NeoPixel_rotate' '_NeoPixel_rotate_left _' 'bool' true
	spec ' ' '_NeoPixel_update' '_NeoPixel_update'

to '_NeoPixel_ensureInitialized' {
  if (_np_pixels == 0) {if ((boardType) == 'M5Atom-Matrix') {
    neoPixelAttach 25 '' false
  } ((boardType) == 'D1-Mini') {
    comment 'D1 mini kit'
    neoPixelAttach 7 15 false
  } else {
    neoPixelAttach 10 '' false
  }}
}

to '_NeoPixel_rotate' left {
  '_NeoPixel_ensureInitialized'
  local 'length' (size _np_pixels)
  if left {
    local 'first' (at 1 _np_pixels)
    for i (length - 1) {
      atPut i _np_pixels (at (i + 1) _np_pixels)
    }
    atPut length _np_pixels first
  } else {
    local 'last' (at length _np_pixels)
    for i (length - 1) {
      atPut ((length - i) + 1) _np_pixels (at (length - i) _np_pixels)
    }
    atPut 1 _np_pixels last
  }
}

to '_NeoPixel_update' {
  '[display:neoPixelSend]' _np_pixels
  waitMicros 100
}

to clearNeoPixels {
  '_NeoPixel_ensureInitialized'
  fillList _np_pixels 0
  '_NeoPixel_update'
}

to colorFromRGB r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return (((r << 16) | (g << 8)) | b)
}

to neoPixelAttach number pinNumber optionalHasWhite {
  hasWhite = false
  if ((pushArgCount) > 2) {
    hasWhite = optionalHasWhite
  }
  if (or (_np_pixels == 0) (number != (size _np_pixels))) {
    _np_pixels = (newList number)
  }
  fillList _np_pixels 0
  '[display:neoPixelSetPin]' pinNumber hasWhite
}

to neoPixelSetAllToColor color {
  '_NeoPixel_ensureInitialized'
  fillList _np_pixels color
  '_NeoPixel_update'
}

to randomColor {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}

to rotateNeoPixelsBy n {
  '_NeoPixel_ensureInitialized'
  repeat (absoluteValue n) {
    '_NeoPixel_rotate' (n > 0)
  }
  '_NeoPixel_update'
}

to setNeoPixelColor i color {
  '_NeoPixel_ensureInitialized'
  if (and (1 <= i) (i <= (size _np_pixels))) {
    atPut i _np_pixels color
    '_NeoPixel_update'
  }
}

to setNeoPixelColors10 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 {
  '_NeoPixel_ensureInitialized'
  if ((size _np_pixels) >= 1) {
    atPut 1 _np_pixels c1
  }
  if ((size _np_pixels) >= 2) {
    atPut 2 _np_pixels c2
  }
  if ((size _np_pixels) >= 3) {
    atPut 3 _np_pixels c3
  }
  if ((size _np_pixels) >= 4) {
    atPut 4 _np_pixels c4
  }
  if ((size _np_pixels) >= 5) {
    atPut 5 _np_pixels c5
  }
  if ((size _np_pixels) >= 6) {
    atPut 6 _np_pixels c6
  }
  if ((size _np_pixels) >= 7) {
    atPut 7 _np_pixels c7
  }
  if ((size _np_pixels) >= 8) {
    atPut 8 _np_pixels c8
  }
  if ((size _np_pixels) >= 9) {
    atPut 9 _np_pixels c9
  }
  if ((size _np_pixels) >= 10) {
    atPut 10 _np_pixels c10
  }
  '_NeoPixel_update'
}


module SCD30
author 'Markus Gälli'
version 1 0 
description 'Implements the interface of the SCD30 environmental sensor 
in MicroBlocks according to its spec in
https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/9.5_CO2/Sensirion_CO2_Sensors_SCD30_Interface_Description.pdf

Allows the user to measure
- CO2 in ppm
- temperature in °C
- humidity in %.

To get started execute the "SCD30 read loop" block.
It starts the continous measurement,
waits until the SCD30 could provide a new measurement,
reads the values into the respective global variables,
and displays them.

To calibrate your scd30 quickly (in 2 minutes)
use the "SCD30 calibrate CO2 to..." block --
read its comment to get you started.

Credits to José García Yeste, the implementation of 
the "SDC30 generate CRC" block is taken from his microblocks SGP30 library.

Note that converting float32 to integer 
only returns the floor of the decimal at the moment.
Hence we return e.g. 20°C instead of 20.8°C.
CO2 ppm is in integers anyway, 
humidity might be up to 0.5% off,
if you needed more concise temperatures
you could use the temperature offset block
and add 0.5°C.'
variables temperature humidity co2 

	spec ' ' 'SCD30 read loop' 'SCD30 read loop'
	spec ' ' 'SCD30 display next measurement' 'SCD30 display next measurement'
	spec ' ' 'SCD30 calibrate' 'SCD30 calibrate CO2 to _ ppm with air pressure _ spec' 'num num' 400 1013
	spec 'r' 'SCD30 generate CRC' 'SCD30 generate CRC _' 'num'
	spec 'r' 'SCD30 check CRC' 'SCD30 check CRC _' 'auto'
	spec ' ' 'SCD30 send' 'SCD30 send command _ parameter _' 'num num'
	spec 'r' 'SCD30 read uint32' 'SCD30 read uint32 _' 'num'
	spec 'r' 'SCD30 float32 to integer' 'SCD30 float32 to integer _ _ _ _' 'num num num num'
	spec ' ' 'SCD30 start measuring with ambient pressure' 'SCD30 start measuring with ambient pressure _' 'num'
	spec ' ' 'SCD30 start measuring' 'SCD30 start measuring'
	spec ' ' 'SCD30 stop measuring' 'SCD30 stop measuring'
	spec ' ' 'SCD30 set measurement interval' 'SCD30 measure every _ seconds' 'num' 2
	spec 'r' 'SCD30 measurement interval' 'SCD30 measurement interval'
	spec 'r' 'SCD30 isReady?' 'SCD30 isReady?'
	spec ' ' 'SCD30 read measurement' 'SCD30 read measurement'
	spec ' ' 'SCD30 start calibrating' 'SCD30 start calibrating'
	spec 'r' 'SCD30 is calibrating?' 'SCD30 is calibrating?'
	spec ' ' 'SCD30 stop calibrating' 'SCD30 stop calibrating'
	spec ' ' 'SCD30 set forced recalibration value' 'SCD30 set forced recalibration value _' 'num' 400
	spec 'r' 'SCD30 forced recalibration value' 'SCD30 forced recalibration value'
	spec ' ' 'SCD30 set temperature offset' 'SCD30 set temperature offset _' 'num' 200
	spec 'r' 'SCD30 temperature offset' 'SCD30 temperature offset'
	spec ' ' 'SCD30 set altitude compensation' 'SCD30 set altitude compensation _' 'num'
	spec 'r' 'SCD30 altitude compensation' 'SCD30 altitude compensation'
	spec 'r' 'SCD30 firmware' 'SCD30 firmware'
	spec ' ' 'SCD30 soft reset' 'SCD30 soft reset'

to 'SCD30 altitude compensation' {
  return ('SCD30 read uint32' (hexToInt '5102'))
}

to 'SCD30 calibrate' ppm mbar {
  comment 'Take your SCD30 to fresh air or some known CO2 concentration.
The default outside CO2 concentration is 400 ppm hence we use 
this as the default value for "ppm".
Look up the current ambient air pressure in mbar -- 
if no value is given it defaults to 1013 mbar. 

Start this script with these parameters and let it work for at least 2 minutes.
Afterwards this script will force the SCD30 to accomodate 
its CO2 persistent calibration curve accordingly.

The script will continue to run afterwards and should then
show values close to the given ppm.
'
  'SCD30 set measurement interval' 2
  'SCD30 start measuring with ambient pressure' mbar
  resetTimer
  repeatUntil ((timer) > 120000) {
    waitUntil ('SCD30 isReady?')
    'SCD30 read measurement'
    sayIt 'CO2:' co2 '; seconds remaining before forced calibration:' (120 - ((timer) / 1000))
  }
  'SCD30 set forced recalibration value' ppm
  sayIt 'Recalibrated to' ('SCD30 forced recalibration value')
  forever {
    waitUntil ('SCD30 isReady?')
    'SCD30 read measurement'
    sayIt 'CO2:' co2
  }
}

to 'SCD30 check CRC' list {
  waitMillis 500
  if (or ((size list) == 0) (((size list) % 3) != 0)) {
    return (booleanConstant false)
  }
  local 'blocks' ((size list) / 3)
  for i blocks {
    local 'toCheck' (((at (((i - 1) * 3) + 1) list) << 8) | (at (((i - 1) * 3) + 2) list))
    local 'result' ('SCD30 generate CRC' toCheck)
    if (result != (at (((i - 1) * 3) + 3) list)) {
      return (booleanConstant false)
    }
  }
  return (booleanConstant true)
}

to 'SCD30 display next measurement' {
  waitUntil ('SCD30 isReady?')
  'SCD30 read measurement'
  sayIt ('[data:join]' 'CO2:' co2 'ppm, temperature:' temperature '°C, humidity:' humidity '%')
}

to 'SCD30 firmware' {
  return ('SCD30 read uint32' (hexToInt 'D100'))
}

to 'SCD30 float32 to integer' byte1 byte2 byte3 byte4 {
  comment 'Only yields the floor of the decimal at the moment, i.e. no values after the ".".
  See library description for workarounds.'
  local 'exponent' 0
  local 'significand' 0
  local 'byte2_mod' 0
  local 'floor' 0
  exponent = (((byte1 << 1) | (byte2 >> 7)) - 127)
  byte2_mod = ((1 << 7) | byte2)
  significand = ((byte2_mod << 16) | ((byte3 << 8) | byte4))
  floor = (significand >> (23 - exponent))
  if ((byte1 >> 7) != 0) {
    floor = (0 - floor)
  }
  return floor
}

to 'SCD30 forced recalibration value' {
  return ('SCD30 read uint32' (hexToInt '5204'))
}

to 'SCD30 generate CRC' uint16 {
  comment 'Credits to José García Yeste, the implementation 
  of this block is taken from his microblocks sgp30 library'
  local 'buf' ('[data:makeList]' (uint16 >> 8) (uint16 & 255))
  local 'crc' (hexToInt 'FF')
  for i (size buf) {
    crc = (crc ^ (at i buf))
    for i 8 {
      if ((crc & (hexToInt '80')) != 0) {
        crc = ((crc << 1) ^ (hexToInt '31'))
      } else {
        crc = (crc << 1)
      }
    }
  }
  return (crc & 255)
}

to 'SCD30 is calibrating?' {
  return (('SCD30 read uint32' (hexToInt '5306')) == 1)
}

to 'SCD30 isReady?' {
  return (('SCD30 read uint32' (hexToInt '0202')) == 1)
}

to 'SCD30 measurement interval' {
  return ('SCD30 read uint32' (hexToInt '4600'))
}

to 'SCD30 read loop' {
  'SCD30 start measuring with ambient pressure' 0
  'SCD30 set measurement interval' 2
  forever {
    'SCD30 display next measurement'
  }
}

to 'SCD30 read measurement' {
  comment 'When new measurement data is available it can be read out with this command. 
Note that the read header should be send with a delay of > 3ms following the write sequence.
Make sure that the measurement is completed by reading the data ready status bit before read out.'
  local 'all' (newList 18)
  local 'command' (hexToInt '0300')
  local 'cmd' ('[data:makeList]' (command >> 8) (command & (hexToInt 'FF')))
  '[sensors:i2cWrite]' (hexToInt '61') cmd
  waitMillis 3
  '[sensors:i2cRead]' (hexToInt '61') all
  if ('SCD30 check CRC' all) {
    co2 = ('SCD30 float32 to integer' (at 1 all) (at 2 all) (at 4 all) (at 5 all))
    temperature = ('SCD30 float32 to integer' (at 7 all) (at 8 all) (at 10 all) (at 11 all))
    humidity = ('SCD30 float32 to integer' (at 13 all) (at 14 all) (at 16 all) (at 17 all))
  }
}

to 'SCD30 read uint32' command {
  'SCD30 send' command ''
  waitMillis 3
  local 'response' (newList 2)
  '[sensors:i2cRead]' (hexToInt '61') response
  local 'singleResponse' (((at 1 response) << 8) | (at 2 response))
  return singleResponse
}

to 'SCD30 send' command parameter {
  local 'cmdList' ('[data:makeList]' (command >> 8) (command & (hexToInt 'FF')))
  if (parameter != '') {
    '[data:addLast]' (parameter >> 8) cmdList
    '[data:addLast]' (parameter & (hexToInt 'FF')) cmdList
    '[data:addLast]' ('SCD30 generate CRC' parameter) cmdList
  }
  '[sensors:i2cWrite]' (hexToInt '61') cmdList
}

to 'SCD30 set altitude compensation' 'current altitude in meter' {
  comment 'Setting altitude is disregarded when an ambient pressure is given to the sensor
via "SCD30 start measuring with ambient pressure"'
  'SCD30 send' (hexToInt '5102') (v 'current altitude in meter')
}

to 'SCD30 set forced recalibration value' ppm {
  'SCD30 send' (hexToInt '5204') ppm
}

to 'SCD30 set measurement interval' second {
  'SCD30 send' (hexToInt '4600') second
}

to 'SCD30 set temperature offset' tick {
  comment 'The on-board RH/T sensor is influenced by thermal self-heating 
of SCD30 and other electrical components. 
Design-in alters the thermal properties of SCD30 such that temperature 
and humidity offsets may occur when operating the sensor in end-customer devices. 
Compensation of those effects is achievable by writing the temperature offset found 
in continuous operation of the device into the sensor.
Temperature offset value is saved in non-volatile memory.
 The last set value will be used for temperature offset compensation after repowering.

Format: uint16 Temperature offset, unit [°C x 100], i.e. one tick corresponds to 0.01°C'
  'SCD30 send' (hexToInt '5403') tick
}

to 'SCD30 soft reset' {
  'SCD30 send' (hexToInt '3D04') ''
}

to 'SCD30 start calibrating' {
  'SCD30 send' (hexToInt '5306') 1
}

to 'SCD30 start measuring' {
  comment 'argument = 0 deactivates pressure compensation.'
  'SCD30 start measuring with ambient pressure' 0
}

to 'SCD30 start measuring with ambient pressure' mbar {
  'SCD30 send' (hexToInt '0010') mbar
}

to 'SCD30 stop calibrating' {
  'SCD30 send' (hexToInt '5306') 0
}

to 'SCD30 stop measuring' {
  'SCD30 send' (hexToInt '0104') ''
}

to 'SCD30 temperature offset' {
  return ('SCD30 read uint32' (hexToInt '5403'))
}


module Strings Data
author MicroBlocks
version 1 4 
description 'String operations.'

	spec 'r' 'isDigit' '_ is a digit' 'str' '5'
	spec 'r' 'isLowercase' '_ is lowercase' 'str' 'A'
	spec 'r' 'isUppercase' '_ is uppercase' 'str' 'E'
	spec 'r' 'beginsWith' '_ begins with _' 'str str' 'prefix' 'pre'
	spec 'r' 'endsWith' '_ ends with _' 'str str' 'suffix' 'fix'
	spec 'r' 'contains' '_ contains _' 'str str' 'smiles' 'mile'
	spec 'r' 'lowercase' 'lowercase _' 'str' 'THIS is a String! :)'
	spec 'r' 'uppercase' 'uppercase _' 'str' 'Hello, world!'
	spec 'r' 'withoutWhiteSpace' '_ without white space' 'str' '1, 2,	3,
4'
	spec 'r' 'joinWith' 'join string list _ separator _' 'auto str' ' ' ' '

to beginsWith string substring {
  return (('[data:find]' substring string) == 1)
}

to contains string substring {
  return (('[data:find]' substring string) > 0)
}

to endsWith string substring {
  return (('[data:find]' substring string) > ((size string) - (size substring)))
}

to isDigit char {
  local 'unicode' ('[data:unicodeAt]' 1 char)
  return (and (unicode >= 48) (unicode <= 57))
}

to isLowercase char {
  local 'unicode' ('[data:unicodeAt]' 1 char)
  return (and (unicode >= 97) (unicode <= 122))
}

to isUppercase char {
  local 'unicode' ('[data:unicodeAt]' 1 char)
  return (and (unicode >= 65) (unicode <= 90))
}

to joinWith stringList separator {
  if (not (isType stringList 'list')) {return ('[data:join]' '' stringList)}
  if (or ((pushArgCount) == 1) (separator == '')) {return ('[data:joinStrings]' stringList)}
  local 'result' (newList (2 * (size stringList)))
  '[data:delete]' 'all' result
  for s stringList {
    '[data:addLast]' s result
    '[data:addLast]' separator result
  }
  '[data:delete]' 'last' result
  return ('[data:joinStrings]' result)
}

to lowercase string {
  local 'new string' ''
  for i (size string) {
    if (isUppercase (at i string)) {
      'new string' = ('[data:join]' (v 'new string') ('[data:unicodeString]' (('[data:unicodeAt]' i string) + 32)))
    } else {
      'new string' = ('[data:join]' (v 'new string') (at i string))
    }
  }
  return (v 'new string')
}

to uppercase string {
  local 'new string' ''
  for i (size string) {
    if (isLowercase (at i string)) {
      'new string' = ('[data:join]' (v 'new string') ('[data:unicodeString]' (('[data:unicodeAt]' i string) - 32)))
    } else {
      'new string' = ('[data:join]' (v 'new string') (at i string))
    }
  }
  return (v 'new string')
}

to withoutWhiteSpace aString {
  local 'result' (newList (size aString))
  '[data:delete]' 'all' result
  for i (size aString) {
    local 'ch' ('[data:unicodeAt]' i aString)
    if (ch > 32) {
      '[data:addLast]' ch result
    }
  }
  return ('[data:unicodeString]' result)
}


module TFT Output
author MicroBlocks
version 1 2 
tags tft graphics draw 
description 'Draw graphics and write text on boards with a TFT display, such as the M5Stack, M5Stick, Citilab ED1 or (discontinued) IoT-Bus.'

	spec ' ' '[display:mbDisplayOff]' 'clear display'
	spec ' ' '[tft:rect]' 'draw rectangle on TFT at x _ y _ width _ height _ color _ : filled _' 'num num num num color bool' 10 10 40 30 nil true
	spec ' ' '[tft:roundedRect]' 'draw rounded rectangle on TFT at x _ y _ width _ height _ radius _ color _ : filled _' 'num num num num num color bool' 10 10 40 30 8 nil true
	spec ' ' '[tft:circle]' 'draw circle on TFT at x _ y _ radius _ color _ : filled _' 'num num num color bool' 40 40 30 nil true
	spec ' ' '[tft:triangle]' 'draw triangle on TFT at x _ y _ , x _ y _ , x _ y _ color _ : filled _' 'num num num num num num color bool' 20 20 30 80 60 5 nil true
	spec ' ' '[tft:text]' 'write _ on TFT at x _ y _ color _ : scale _ wrap _' 'str num num color num bool' 'Hello World!' 5 5 nil 2 true
	spec ' ' '[tft:line]' 'draw line on TFT from x _ y _ to x _ y _ color _' 'num num num num color' 12 8 25 15
	spec ' ' '[tft:setPixel]' 'set TFT pixel x _ y _ to _' 'auto auto color' '10' '10'
	spec 'r' 'makeColor' 'color r _ g _ b _ (0-255)' 'auto auto auto' 0 100 100
	spec 'r' 'randomColor' 'random color'
	spec 'r' '[tft:getWidth]' 'TFT width'
	spec 'r' '[tft:getHeight]' 'TFT height'
	spec ' ' '[tft:enableDisplay]' 'enable TFT _' 'bool' true
	spec ' ' '[tft:setBacklight]' 'set TFT backlight _ (0-10)' 'num' 10

to makeColor r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return ((r << 16) | ((g << 8) | b))
}


module digits
author Matthias
version 1 2 
description 'Library to display big digital numbers'
variables x y dig_l numbers dig_g dig_r color 

	spec ' ' '0' '0'
	spec ' ' '1' '1'
	spec ' ' '2' '2'
	spec ' ' '3' '3'
	spec ' ' '4' '4'
	spec ' ' '5' '5'
	spec ' ' '6' '6'
	spec ' ' '7' '7'
	spec ' ' '8' '8'
	spec ' ' '9' '9'
	spec ' ' 'h1' 'h1'
	spec ' ' 'h2' 'h2'
	spec ' ' 'h3' 'h3'
	spec ' ' 'lvd' 'lvd'
	spec ' ' 'lvt' 'lvt'
	spec ' ' 'rvd' 'rvd'
	spec ' ' 'rvt' 'rvt'
	spec ' ' 'displayDigits' 'displayDigits _ _' 'auto auto' '10' '5'
	spec ' ' 'empty' 'empty'
	spec ' ' 'initDigits' 'initDigits _ _ _' 'auto auto auto' '20' '4' '2'
	spec 'r' 'fillDigits' 'fillDigits _ _' 'auto auto' '10' '10'
	spec ' ' 'space' 'space'

to '0' {
  h1
  lvt
  rvt
  h3
  lvd
  rvd
}

to '1' {
  rvt
  rvd
}

to '2' {
  h1
  rvt
  h2
  lvd
  h3
}

to '3' {
  h1
  rvt
  h2
  rvd
  h3
}

to '4' {
  lvt
  rvt
  h2
  rvd
}

to '5' {
  h1
  lvt
  h2
  rvd
  h3
}

to '6' {
  h1
  lvt
  h2
  lvd
  rvd
  h3
}

to '7' {
  h1
  rvt
  rvd
}

to '8' {
  h1
  lvt
  rvt
  h2
  lvd
  rvd
  h3
}

to '9' {
  h1
  lvt
  rvt
  h2
  rvd
  h3
}

to displayDigits digits length {
  numbers = ('[data:split]' (fillDigits digits length) '')
  for i (size numbers) {
    if ((at i numbers) == (at 1 '1')) {
      '1'
    } ((at i numbers) == (at 1 '2')) {
      '2'
    } ((at i numbers) == (at 1 '3')) {
      '3'
    } ((at i numbers) == (at 1 '4')) {
      '4'
    } ((at i numbers) == (at 1 '5')) {
      '5'
    } ((at i numbers) == (at 1 '6')) {
      '6'
    } ((at i numbers) == (at 1 '7')) {
      '7'
    } ((at i numbers) == (at 1 '8')) {
      '8'
    } ((at i numbers) == (at 1 '9')) {
      '9'
    } ((at i numbers) == (at 1 '0')) {
      '0'
    } else {
    }
    space
  }
}

to empty {
  x += (l + 0)
}

to fillDigits digits length {
  local 'spacer' ''
  if (length > (size ('[data:join]' digits ''))) {
    for i (length - (size ('[data:join]' digits ''))) {
      spacer = ('[data:join]' ' ' spacer)
    }
  }
  return ('[data:join]' spacer digits)
}

to h1 {
  '[tft:roundedRect]' (x + dig_g) y dig_l dig_g dig_r color
}

to h2 {
  '[tft:roundedRect]' (x + dig_g) ((y + dig_l) + dig_g) dig_l dig_g dig_r color
}

to h3 {
  '[tft:roundedRect]' (x + dig_g) (y + ((dig_l + dig_g) * 2)) dig_l dig_g dig_r color
}

to initDigits size stroke round {
  dig_l = size
  dig_g = stroke
  dig_r = round
}

to lvd {
  '[tft:roundedRect]' x ((y + dig_l) + (dig_g * 2)) dig_g dig_l dig_r color
}

to lvt {
  '[tft:roundedRect]' x (y + dig_g) dig_g dig_l dig_r color
}

to rvd {
  '[tft:roundedRect]' ((x + dig_l) + dig_g) ((y + dig_l) + (dig_g * 2)) dig_g dig_l dig_r color
}

to rvt {
  '[tft:roundedRect]' ((x + dig_l) + dig_g) (y + dig_g) dig_g dig_l dig_r color
}

to space {
  x += (2 * (dig_l + dig_g))
}

script 65 50 {
comment 'This library allows you to display numbers in a big digital styled font.

It uses the TFT library and the "draw round rectangle on TFT at ..." function

to display rounded rectangles which form the individual stroke of a digit.

The digits are then built by displaying these individual strokes.

Finally some fine-tuning of the way the digits are displayed is available.'
}

script 70 247 {
whenStarted
x = 0
y = 0
comment 'The Digits library uses the x and y variables

to place the digits on the screen.'
}

script 69 420 {
initDigits 20 4 2
comment 'Controls the size of the individual strokes of a single digit:

length, width, round

For rounded strokes the round-value should be half

of the width value.'
}

script 74 592 {
displayDigits 10 5
comment 'Displays a number on the screen:

number, length

The length parameter allows different numbers to

be justified to the right.'
}

script 77 769 {
comment 'Demonstration of the Digits library.'
color = (colorSwatch 255 255 30 255)
initDigits 20 4 0
for i 99 {
  '[display:mbDisplayOff]'
  '[tft:text]' 'CO2' 0 0 color
  '[tft:text]' 'ppm' 0 l color
  x = 0
  displayDigits (100 * i) 5
  waitMillis 50
}
}

script 75 1082 {
comment 'Definition of individual strokes'
}

script 922 1129 {
to h3 {}
}

script 76 1137 {
to h1 {}
}

script 452 1137 {
to h2 {}
}

script 461 1311 {
to rvt {}
}

script 79 1312 {
to lvt {}
}

script 85 1488 {
to lvd {}
}

script 567 1489 {
to rvd {}
}

script 83 1675 {
comment 'Definition of digits 0-9 and space between digits'
}

script 83 1747 {
to '0' {}
}

script 233 1749 {
to '1' {}
}

script 538 1749 {
to '3' {}
}

script 382 1750 {
to '2' {}
}

script 691 1750 {
to '4' {}
}

script 844 1752 {
to '5' {}
}

script 998 1752 {
to '6' {}
}

script 80 1981 {
to '7' {}
}

script 247 1982 {
to '8' {}
}

script 406 1982 {
to '9' {}
}

script 571 1984 {
to space {}
}

script 58 2268 {
comment 'Blocks to initialize and display numbers in big digits.'
}

script 61 2323 {
to initDigits {}
}

script 65 2496 {
to fillDigits {}
}

script 63 2820 {
to displayDigits {}
}


module drawGraph
author 'Matthias Giger'
version 1 0 
depends TFT 
description 'Draws a scaled graph on the Adafruit CLUE display
'
variables list 

	spec ' ' 'drawGraph' 'drawGraph _ _ _ _ _ _ _' 'auto auto auto auto auto auto auto' '10' '10' '10' '10' '10' '10' '10'
	spec 'r' 'scale value' 'scale value _ _ _ _ _' 'auto auto auto auto auto' '10' '10' '10' '10' '10'

to drawGraph values labels height color min max timestr {
  local 'labelList' ('[data:split]' labels ';')
  '[tft:text]' timestr 0 (height - 15) (makeColor 180 180 180) 1 false
  for i (size labelList) {
    '[tft:line]' 0 ('scale value' (at i labelList) min max height 240) 210 ('scale value' (at i labelList) min max height 240) (makeColor 180 180 180)
    '[tft:text]' (at i labelList) 215 (('scale value' (at i labelList) min max height 240) - 2) (makeColor 180 180 180) 1 false
  }
  for i (size list) {
    '[tft:setPixel]' i ('scale value' (at i values) min max height 240) color
  }
}

to 'scale value' value minin maxin minout maxout {
  local 'diffin' 0
  local 'diffout' 0
  local 'factor' 0
  diffin = (maxin - minin)
  diffout = (maxout - minout)
  return (240 - (((value * diffout) / diffin) - ((minin * diffout) / diffin)))
}


module menuOptions
author 'Matthias Giger'
version 1 0 
depends TFT 
description 'used to simplify menues in CO2 sensor programme
'
variables menuy menux menuList 

	spec ' ' 'displayOptions' 'displayOptions _' 'str' ''
	spec 'r' 'getOption' 'getOption _' 'auto' '10'
	spec ' ' 'advanceMenu' 'advanceMenu _' 'auto' '10'
	spec 'r' 'menuyToGraph' 'menuyToGraph _ _ _' 'auto auto auto' '10' '10' '10'
	spec 'r' 'stringToList' 'stringToList _' 'auto' '10'

to advanceMenu menuItems {
  '[tft:rect]' 0 (menuyToGraph menuy 30 5) 30 5 (colorSwatch 0 0 0 255)
  menuy += 1
  '[tft:rect]' 0 (menuyToGraph menuy 30 5) 30 5 (colorSwatch 35 190 30 255)
  if (menuy >= (size (stringToList menuItems))) {
    sendBroadcast 'Main Menu'
  }
}

to displayOptions optionString {
  menuy = 1
  '[display:mbDisplayOff]'
  '[tft:rect]' 0 (menuyToGraph 1 30 5) 30 5 (colorSwatch 35 190 30 255)
  local 'optionList' ('[data:split]' optionString ';')
  for i (size optionList) {
    if (i == 1) {
      menux = 0
    } else {
      menux = 40
    }
    '[tft:text]' (at i optionList) menux ((i - 1) * 30) (colorSwatch 35 190 30 255)
  }
}

to getOption optionString {
  local 'optionList' ('[data:split]' optionString ';')
  return (at (menuy + 1) optionList)
}

to menuyToGraph number multiplier offset {
  return ((number * multiplier) + offset)
}

to stringToList string {
  return ('[data:split]' string ';')
}

